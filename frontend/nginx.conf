events {
    worker_connections 128;
}

env OIDC_CLIENT_ID;
env OIDC_CLIENT_SECRET;

http {
    lua_package_path '~/lua/?.lua;;';

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
    lua_ssl_verify_depth 5;

    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;

    server {
        server_name ocean.sh;
        listen 8080;

        location / {
            # Lua HTTP module doesn't support ipv4 and fails if DNS reply is ipv6
            resolver 8.8.8.8 valid=30s ipv6=off;

            access_by_lua_block {
                local opts = {
                    discovery     = "https://accounts.google.com/.well-known/openid-configuration",
                    client_id     = os.getenv('OIDC_CLIENT_ID'),
                    client_secret = os.getenv('OIDC_CLIENT_SECRET'),

                    redirect_uri = ngx.var.scheme.."://"..ngx.var.server_name.."/redirect_uri",
                    token_signing_alg_values_expected = "RS256",
                }

                local res, err = require("resty.openidc").authenticate(opts)
                if err or not res then
                    ngx.status = 403
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                end
                if not res.user then
                    ngx.status = 400
                    ngx.exit(ngx.HTTP_BAD_REQUEST)
                end
                ngx.req.set_header('Authenticated-User', res.user.email)
            }
            # Separate location, so our server doesn't get confused
            proxy_pass http://localhost:3000/frontend/;
        }
    }
    server {
        listen 3000;
        default_type text/html;

        root /opt/templates;

        location /frontend {
            # Set to Docker's DNS resolver, so LUA can find Redis
            resolver 127.0.0.11 valid=30s ipv6=off;
            content_by_lua_file /opt/frontend.lua;
        }
    }
}
